<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dongwu Xu</title>
  
  <subtitle>Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dwxu.me/"/>
  <updated>2018-05-24T14:57:04.835Z</updated>
  <id>http://www.dwxu.me/</id>
  
  <author>
    <name>Dongwu Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 iostat 命令监视磁盘设备活动情况</title>
    <link href="http://www.dwxu.me/2018/05/24/linux-iostat/"/>
    <id>http://www.dwxu.me/2018/05/24/linux-iostat/</id>
    <published>2018-05-24T14:10:10.000Z</published>
    <updated>2018-05-24T14:57:04.835Z</updated>
    
    <content type="html"><![CDATA[<p>最近在排查 MariaDB 主从数据库数据同步/复制延迟问题，使用 Linux 系统的 iostat 查看服务器磁盘设备的活动情况，发现瓶颈在于磁盘的I/O，一般而言，大量数据读写频繁的情况下，最终磁盘I/O都会成为瓶颈。</p><h3 id="1-使用说明"><a href="#1-使用说明" class="headerlink" title="1. 使用说明"></a>1. 使用说明</h3><ul><li>查看 CPU 和磁盘 I/O 相关的统计信息</li><li><p>指令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[51la_dev@db2 ~]$ iostat --help</span><br><span class="line">Usage: iostat [ options ] [ &lt;interval&gt; [ &lt;count&gt; ] ]</span><br><span class="line">Options are:</span><br><span class="line">[ -c ] [ -d ] [ -N ] [ -n ] [ -h ] [ -k | -m ] [ -t ] [ -V ] [ -x ] [ -y ] [ -z ]</span><br><span class="line">[ -j &#123; ID | LABEL | PATH | UUID | ... &#125; [ &lt;device&gt; [...] | ALL ] ]</span><br><span class="line">[ &lt;device&gt; [...] | ALL ] [ -p [ &lt;device&gt; [,...] | ALL ] ]</span><br></pre></td></tr></table></figure></li><li><p>主要参数说明：</p><ul><li>-c：显示CPU使用情况</li><li>-d：显示磁盘使用情况</li><li>-k：以 KB 为单位显示</li><li>-m：以 M 为单位显示</li><li>-N：显示磁盘阵列(LVM) 信息</li><li>-n：显示NFS 使用情况</li><li>-p[磁盘]：显示磁盘和分区的情况</li><li>-t：显示终端和CPU的信息</li><li>-x：显示详细信息</li><li>-V：显示版本信息</li></ul></li></ul><h3 id="2-使用实例"><a href="#2-使用实例" class="headerlink" title="2. 使用实例"></a>2. 使用实例</h3><p><div align="center"><br><img src="/2018/05/24/linux-iostat/iostat.png" alt="iostat"><br></div></p><ul><li><p>输出信息说明：</p><ul><li>首行：系统/服务器相关信息</li><li>avg-cpu：cpu 状态信息</li><li>rrqm/s：每秒合并读操作的次数</li><li>wrqm/s：每秒合并写操作的次数</li><li>r/s：每秒读操作的次数</li><li>w/s： 每秒写操作的次数</li><li>rMB/s：每秒读取的MB字节数</li><li>wMB/s：每秒写入的MB字节数</li><li>avgrq-sz：平均每个 I/O 操作的扇区数，即所有请求的平均大小，以扇区（512字节）为单位</li><li>avgqu-sz：平均 I/O 请求队列长度</li><li>await：平均每个 I/O 所需要的时间，包括在队列等待的时间，也包括磁盘控制器处理本次请求的有效时间（毫秒）</li><li>r_wait：每个读操作平均所需要的时间，不仅包括硬盘设备读操作的时间，也包括在内核队列中的时间（毫秒）</li><li>w_wait：每个写操平均所需要的时间，不仅包括硬盘设备写操作的时间，也包括在队列中等待的时间（毫秒）</li><li>svctm：平均每次设备I/O操作的服务时间 (毫秒)</li><li>%util：工作时间或者繁忙时间占总时间的百分比</li></ul></li><li><p>简单分析以上截图：</p><ul><li>服务器有 48 个逻辑 CPU，而且很空闲（93.36% 的空闲），性能是比较强</li><li>sde 磁盘/设备的写操作十分频繁（每秒超过 1000 次），读操作平均等待时间超过 1000 毫秒，尤其是 %util 到达 100%（没有空闲时间），很容易（或已经）导致性能受限，成为相关任务的瓶颈。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在排查 MariaDB 主从数据库数据同步/复制延迟问题，使用 Linux 系统的 iostat 查看服务器磁盘设备的活动情况，发现瓶颈在于磁盘的I/O，一般而言，大量数据读写频繁的情况下，最终磁盘I/O都会成为瓶颈。&lt;/p&gt;
&lt;h3 id=&quot;1-使用说明&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.dwxu.me/categories/Linux/"/>
    
    
      <category term="性能" scheme="http://www.dwxu.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Java自动装箱和拆箱</title>
    <link href="http://www.dwxu.me/2018/05/22/java-boxing/"/>
    <id>http://www.dwxu.me/2018/05/22/java-boxing/</id>
    <published>2018-05-22T14:10:15.000Z</published>
    <updated>2018-05-22T14:47:11.607Z</updated>
    
    <content type="html"><![CDATA[<p>毫无疑问，自动装箱和自动拆箱是 Java 语言里使用最多的语法糖。以 Integer 为例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Integer foo = <span class="number">1</span>;</span><br><span class="line">    List&lt;Integer&gt; bar = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    Integer[] baz = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译为 Class 文件后反编译：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] var0)</span> </span>&#123;</span><br><span class="line">    Integer var1 = Integer.valueOf(<span class="number">1</span>);</span><br><span class="line">    List var2 = Arrays.asList(Integer.valueOf(<span class="number">1</span>), Integer.valueOf(<span class="number">2</span>), Integer.valueOf(<span class="number">3</span>), Integer.valueOf(<span class="number">4</span>));</span><br><span class="line">    Integer[] var10000 = <span class="keyword">new</span> Integer[]&#123;Integer.valueOf(<span class="number">1</span>), Integer.valueOf(<span class="number">2</span>), Integer.valueOf(<span class="number">3</span>), Integer.valueOf(<span class="number">4</span>)&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br><br>自动装箱和拆箱是 JDK1.5 的新特性，之前都是手动进行包装类的装箱和拆箱：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> foo = <span class="number">1</span>; <span class="comment">// 基本数据类型int</span></span><br><span class="line">Integer bar = <span class="keyword">new</span> Integer(foo); <span class="comment">// 手动装箱</span></span><br><span class="line"><span class="keyword">int</span> baz = bar.intValue(); <span class="comment">// 手动拆箱</span></span><br></pre></td></tr></table></figure></p><p>JDK1.5 之后自动进行装箱和拆箱：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer foo = <span class="number">10</span>; <span class="comment">// 自动装箱</span></span><br><span class="line"><span class="keyword">int</span> bar = foo; <span class="comment">// 自动拆箱</span></span><br><span class="line">System.out.println(foo--); <span class="comment">// 输出10, 计算时的自动拆箱</span></span><br></pre></td></tr></table></figure></p><p><br><br>另外，观察以下程序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Integer a = <span class="number">95</span>;</span><br><span class="line">    Integer b = <span class="number">95</span>;</span><br><span class="line">    System.out.println(<span class="string">"a == b: "</span> + (a == b));</span><br><span class="line"></span><br><span class="line">    Integer c = <span class="number">295</span>;</span><br><span class="line">    Integer d = <span class="number">295</span>;</span><br><span class="line">    System.out.println(<span class="string">"c == d: "</span> + (c == d));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a == b: <span class="keyword">true</span></span><br><span class="line">c == d: <span class="keyword">false</span></span><br></pre></td></tr></table></figure></p><p>原因是在自动装箱的时候，[-128, 127] 内的值被装箱成 Integer 对象存在内存中（Cache），可以被重用，“ == ” 比较的是对象的内存地址，因此 a 和 b 实际上是同一个对象，比较结果自然是 true，而超出以上范围的数值装箱后的对象并不会被重用，那么就相当于创建两个对象，比较的结果自然是false。<br><br><br>每种基本数据类型都有对应的包装类，如下：</p><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>int</td><td>Integer</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;毫无疑问，自动装箱和自动拆箱是 Java 语言里使用最多的语法糖。以 Integer 为例：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
      <category term="Java" scheme="http://www.dwxu.me/categories/Java/"/>
    
    
      <category term="语法糖" scheme="http://www.dwxu.me/tags/%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
    
  </entry>
  
  <entry>
    <title>同一手机号注册多个 Gmail 邮箱</title>
    <link href="http://www.dwxu.me/2018/05/21/gmail-register/"/>
    <id>http://www.dwxu.me/2018/05/21/gmail-register/</id>
    <published>2018-05-21T13:37:18.000Z</published>
    <updated>2018-05-24T14:54:28.964Z</updated>
    
    <content type="html"><![CDATA[<p>由于之前注册的 Gmail 邮箱地址包含个人信息（十分建议申请邮箱地址时慎用个人信息，如生日等）并且不太正式，因此想另外申请一个邮箱地址，然而目前一个手机号注册只能注册一个账号，无法直接重新申请：<br><img src="/2018/05/21/gmail-register/gmail1.png" alt="提示号码无法用于进行验证"><br><br><br>尝试了多种方式进行注册后，发现可以使用 <strong>Chrome 浏览器</strong> 注册成功：</p><ul><li><p>打开 <strong>设置</strong> 页面，点击 <strong>登录 CHROME</strong>，在弹出来的对话框中，点击 <strong>更多选项</strong>，选择 <strong>创建新账号</strong>：<br><img src="/2018/05/21/gmail-register/gmail2.png" alt="提示号码无法用于进行验证"></p></li><li><p>按提示填写 <strong>姓氏</strong> 和 <strong>姓名</strong> 后，进入发送验证码页面，<strong>国家/地区</strong> 选择 <strong>HK</strong>，电话号码前面增加 <strong>+86</strong>：<br><img src="/2018/05/21/gmail-register/gmail3.png" alt="提示号码无法用于进行验证"></p></li><li><p>点击 <strong>下一步</strong>，即可收到验证码短信：<br><img src="/2018/05/21/gmail-register/gmail4.jpeg" alt="提示号码无法用于进行验证"></p></li><li><p>之后根据提示填写邮箱地址完成注册<br><br></p></li></ul><p>旧的邮箱可能绑定过其他网站或者系统，也需要查看相关邮件，可以使用新的邮箱代收旧邮箱的邮件，在 Gmail 邮箱界面 设置 - 账号和导入 - 查收其他账号的邮件 中进行设置，具体操作可点击 <a href="https://support.google.com/mail/answer/21289?hl=zh-Hans" target="_blank" rel="noopener">了解详情</a> 查看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于之前注册的 Gmail 邮箱地址包含个人信息（十分建议申请邮箱地址时慎用个人信息，如生日等）并且不太正式，因此想另外申请一个邮箱地址，然而目前一个手机号注册只能注册一个账号，无法直接重新申请：&lt;br&gt;&lt;img src=&quot;/2018/05/21/gmail-registe
      
    
    </summary>
    
      <category term="备忘" scheme="http://www.dwxu.me/categories/%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="Gmail" scheme="http://www.dwxu.me/tags/Gmail/"/>
    
  </entry>
  
  <entry>
    <title>Java泛型与类型擦除</title>
    <link href="http://www.dwxu.me/2018/05/19/java-generics/"/>
    <id>http://www.dwxu.me/2018/05/19/java-generics/</id>
    <published>2018-05-19T09:26:40.000Z</published>
    <updated>2018-05-22T14:46:07.196Z</updated>
    
    <content type="html"><![CDATA[<p>泛型是 JDK1.5 的一项新增特性，本质是参数化类型的应用，即所操作的数据类型被指定为一个参数，可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口和泛型方法：</p><ul><li><p>泛型接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过类实现泛型接口时指定泛型 K 和 V 的具体类型，如 java.util 包中的 Map&lt;K, V&gt; ；</span><br></pre></td></tr></table></figure></li><li><p>泛型类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编译器无法知道 K 和 V 的具体类型，只有运行时才真正根据类型来构造和分配内存，如 java.util 包中的 HashMap&lt;K,V&gt; ；</span><br></pre></td></tr></table></figure></li><li><p>泛型方法：泛型方法返回值前加一个<k>、<v>等来声明这是一个泛型方法，如</v></k></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt;</span><br><span class="line">    implements Map&lt;K,V&gt;, Cloneable, Serializable &#123;</span><br><span class="line">    ...</span><br><span class="line">    public V get(Object key) &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        return (e = getNode(hash(key), key)) == null ? null : e.value;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    public V put(K key, V value) &#123;</span><br><span class="line">        return putVal(hash(key), key, value, false, true);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br></p><p>实际上，Java中 的泛型与 C++/C# 的中泛型实现不同，只在程序源码中存在，在编译后的字节码文件中，就已经替换为原生类型（也称为裸类型，如 Map&lt;K, V&gt; 即为 Map），并且在相应的地方插入了强制类型转换的代码，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Map&lt;String, String&gt; data = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">data.put(<span class="string">"foo"</span>, <span class="string">"foo"</span>);</span><br><span class="line">data.put(<span class="string">"bar"</span>, <span class="string">"bar"</span>);</span><br><span class="line">data.put(<span class="string">"baz"</span>, <span class="string">"baz"</span>);</span><br><span class="line">System.out.println(data.get(<span class="string">"foo"</span>));</span><br><span class="line">System.out.println(data.get(<span class="string">"bar"</span>));</span><br><span class="line">System.out.println(data.get(<span class="string">"baz"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为 Class 文件后反编译：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] paramArrayOfString)</span> </span>&#123;</span><br><span class="line">    HashMap localHashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">    localHashMap.put(<span class="string">"foo"</span>, <span class="string">"foo"</span>);</span><br><span class="line">    localHashMap.put(<span class="string">"bar"</span>, <span class="string">"bar"</span>);</span><br><span class="line">    localHashMap.put(<span class="string">"baz"</span>, <span class="string">"baz"</span>);</span><br><span class="line">    System.out.println((String)localHashMap.get(<span class="string">"foo"</span>));</span><br><span class="line">    System.out.println((String)localHashMap.get(<span class="string">"bar"</span>));</span><br><span class="line">    System.out.println((String)localHashMap.get(<span class="string">"baz"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br></p><p>这种类型擦除的方式实现的泛型支持，只是作为一种语法糖来方便程序员的代码开发，提高效率和语法的严谨性，减少编码出错的机会，但并没有提供底层实质性的功能改进，因此 Java 的泛型支持实现一直存在争议和批评，例如由于 List&lt;String&gt; 和 List&lt;Integer&gt; 擦除后是同一类型（List），无法实现重载（实际上，两个方法如果返回值类型不同，使用 Sun JDK 1.6 的 javac 也能编译成功）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;泛型是 JDK1.5 的一项新增特性，本质是参数化类型的应用，即所操作的数据类型被指定为一个参数，可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口和泛型方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;泛型接口：&lt;/p&gt;
&lt;figure class=&quot;highlight pl
      
    
    </summary>
    
      <category term="Java" scheme="http://www.dwxu.me/categories/Java/"/>
    
    
      <category term="语法糖" scheme="http://www.dwxu.me/tags/%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
    
      <category term="泛型" scheme="http://www.dwxu.me/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>高并发下多站点在线访问实时统计</title>
    <link href="http://www.dwxu.me/2018/05/16/online-statistics/"/>
    <id>http://www.dwxu.me/2018/05/16/online-statistics/</id>
    <published>2018-05-16T15:20:09.000Z</published>
    <updated>2018-05-16T15:24:15.382Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、业务背景"><a href="#一、业务背景" class="headerlink" title="一、业务背景"></a>一、业务背景</h3><ul><li>实时统计多个站点的在线独立访问情况；</li><li>统计的时间范围为 10/15/30 分钟；</li><li>所有站点每秒累计约 10w 的 pv；</li></ul><h3 id="二、解决思路"><a href="#二、解决思路" class="headerlink" title="二、解决思路"></a>二、解决思路</h3><ul><li>按客户端 IP+SessionId 区分独立访问；</li><li>将在线访问信息（站点ID、IP、Session Id、访问时间等）写入 Kafka 集群；</li><li>Storm(集群) 实时消费 Kafka 在线访问信息/消息，合并访问写入 Redis；</li><li>上层应用从 Redis 获取各站点 10/15/30 分钟内的独立访问数据进行计算并展示；</li></ul><h3 id="三、详细设计"><a href="#三、详细设计" class="headerlink" title="三、详细设计"></a>三、详细设计</h3><h4 id="1-redis-数据结构设计"><a href="#1-redis-数据结构设计" class="headerlink" title="1. redis 数据结构设计"></a>1. redis 数据结构设计</h4><ul><li>将每分钟的站点数据写入一个 Hash 集合（过期时间为 30 分钟），key 为 online:{comId}:{minute}，其中 {comId} 为站点ID，{minute} 为在线时间的分钟字段（0-59）；</li><li>集合下的元素结构为：field - {ip}:{sessionId}（独立访问），value - 该独立访问一分钟内的请求/响应次数，通过 hincrby 指令递增；</li></ul><h4 id="2-数据统计"><a href="#2-数据统计" class="headerlink" title="2. 数据统计"></a>2. 数据统计</h4><ul><li>统计范围为当前 10/15/30 分钟内；</li><li>通过站点ID及当前时间从 redis 中读取该站点 30 分钟内的数据集合，例如站点ID为1，查询时间为 9点33分钟，则从 redis 读取 online:1:33 - online:1:3 的数据集合；</li><li>合并数据集合的 key（{ip}:{sessionId}），即去重，即可得到指定时间范围内的在线访问数；</li></ul><h4 id="3-说明"><a href="#3-说明" class="headerlink" title="3. 说明"></a>3. 说明</h4><ul><li>数据写入 Redis 频繁，需要优先考虑写入耗时和内存的问题，因此通过 hincrby 和 expired 这两个时间复杂度为 O(1) 的指令来快速写入在线数据；</li><li>每个站点的数据集合过期时间为 30 分钟（根据请求时间计算过期的时间戳），因此一个站点最多同时存在 30 个数据集合，过期的集合由 Redis 自动清理，无需再自行清理；</li><li>每个集合的有效数据实际为 field 的部分，记录每分钟的独立访问，接口在获取数据进行统计时，直接取出 field 的 Set 集合进行自动合并即可；</li></ul><h3 id="四、线上情况"><a href="#四、线上情况" class="headerlink" title="四、线上情况"></a>四、线上情况</h3><ul><li>Redis 单机/单实例；</li><li>30分钟内活跃的站点约 1.5w 个，两个小时内监控 Redis，redis 总内存占用稳定在 5.5G 以下（较上线此统计前多占用 1G 内存），数据集合能够正常过期并被 redis 清理；</li><li>应用 0.3s 内完成统计访问最频繁/数据量最大的站点的各时段内在线访问情况，当然跟服务器性能比较好也有关系；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、业务背景&quot;&gt;&lt;a href=&quot;#一、业务背景&quot; class=&quot;headerlink&quot; title=&quot;一、业务背景&quot;&gt;&lt;/a&gt;一、业务背景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;实时统计多个站点的在线独立访问情况；&lt;/li&gt;
&lt;li&gt;统计的时间范围为 10/15/30 分钟
      
    
    </summary>
    
      <category term="解决方案" scheme="http://www.dwxu.me/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="实时统计" scheme="http://www.dwxu.me/tags/%E5%AE%9E%E6%97%B6%E7%BB%9F%E8%AE%A1/"/>
    
      <category term="Redis" scheme="http://www.dwxu.me/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>各大搜索引擎来路referer头部及搜索关键字字段</title>
    <link href="http://www.dwxu.me/2018/05/15/search-engine-referer/"/>
    <id>http://www.dwxu.me/2018/05/15/search-engine-referer/</id>
    <published>2018-05-15T12:25:00.000Z</published>
    <updated>2018-05-15T12:38:28.993Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-百度搜索："><a href="#1-百度搜索：" class="headerlink" title="1. 百度搜索："></a>1. 百度搜索：</h4><ul><li><p>PC端：</p><ul><li><p>referer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com/link?url=gZRk-i0rKd2zEpXr6gLWgcMaB6gj49Qh0SRhVyeD1TG&amp;wd=&amp;eqid=e0224cf50000f590000000065ac98dee</span><br></pre></td></tr></table></figure></li><li><p>关键字字段：wd（无实际值）</p></li></ul></li><li><p>移动端：</p><ul><li><p>referer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://m.baidu.com/from=0/bd_page_type=1/ssid=0/uid=0/pu=usm%401%2Csz%40320_1001%2Cta%40iphone_2_6.0_3_537/baiduid=EDC0F469B2C8C28ED6153A8DFE7B0F35/w=0_10_/t=iphone/l=1/tc?ref=www_iphone&amp;lid=9293408228010889187&amp;order=1&amp;fm=alop&amp;dict=-1&amp;tj=www_sitelink_normal_1_0_10_title&amp;wd=&amp;eqid=80f8d18b77481000100000005ac98e54&amp;w_qd=IlPT2AEptyoA_yjkTUugn4fHR5kW&amp;tcplug=1&amp;sec=28899&amp;di=6b8e30a65323dcbb&amp;bdenc=1&amp;tch=124.0.206.178.0.0&amp;nsrc=IlPT2AEptyoA_yixCFOxXnANedT62v3IEQGG_8kJLDKv7JuV&amp;clk_info=%7B%22srcid%22%3A1539%2C%22tplname%22%3A%22www_sitelink_normal%22%2C%22t%22%3A1523158616510%2C%22xpath%22%3A%22div-a-h3-em%22%7D</span><br></pre></td></tr></table></figure></li><li><p>关键字字段：wd（无实际值）</p></li></ul></li></ul><h4 id="2-搜狗搜索（soso-搜索）："><a href="#2-搜狗搜索（soso-搜索）：" class="headerlink" title="2. 搜狗搜索（soso 搜索）："></a>2. 搜狗搜索（soso 搜索）：</h4><ul><li><p>PC端：</p><ul><li><p>referer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.sogou.com/link?url=DSOYnZeCC_oowgX7OeX6FW4YafSeot-j</span><br></pre></td></tr></table></figure></li><li><p>关键字字段：无</p></li></ul></li><li><p>移动端：</p><ul><li><p>referer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://m.sogou.com/web/searchList.jsp?uID=vU0WMAQthy-ORLar&amp;v=5&amp;from=index&amp;w=1274&amp;t=1523158841365&amp;s_t=1523158844479&amp;s_from=index&amp;keyword=51la%E7%BB%9F%E8%AE%A1&amp;pg=webSearchList&amp;sourceid=sugg&amp;sugoq=&amp;sugn=0&amp;suguuid=fa153a85-07bb-4afa-bb07-69d3775d9966&amp;sugsuv=AAHV9fA6HwAAAAqRK1G8bQ0A1wA%3D&amp;sugtime=1523158844484</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://wap.sogou.com/web/searchList.jsp?uID=vU0WMAQthy-ORLar&amp;v=5&amp;from=index&amp;w=1274&amp;t=1523158841365&amp;s_t=1523158844479&amp;s_from=index&amp;keyword=51la%E7%BB%9F%E8%AE%A1&amp;pg=webSearchList&amp;sourceid=sugg&amp;sugoq=&amp;sugn=0&amp;suguuid=fa153a85-07bb-4afa-bb07-69d3775d9966&amp;sugsuv=AAHV9fA6HwAAAAqRK1G8bQ0A1wA%3D&amp;sugtime=1523158844484</span><br></pre></td></tr></table></figure></li><li><p>关键字字段：keyword（有实际值）</p></li></ul></li></ul><h4 id="3-360-搜索（360好搜）："><a href="#3-360-搜索（360好搜）：" class="headerlink" title="3. 360 搜索（360好搜）："></a>3. 360 搜索（360好搜）：</h4><ul><li><p>PC端：</p><ul><li><p>referer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.so.com/link?m=afEPOwxb%2BqdAts7rzNmmh%2F2cxMIM5669zqvLn1I5nPYjRlp8haa0nn%2FWJfYFNGvfzb4XdzUBb5wCnL2um08mnoi%2Bsge9ZjqTN</span><br></pre></td></tr></table></figure></li><li><p>referer 关键字字段：无</p></li></ul></li><li><p>移动端：</p><ul><li><p>referer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://m.so.com/s?q=51la%E7%BB%9F%E8%AE%A1&amp;src=msearch_next_input&amp;sug_pos=&amp;sug=&amp;srcg=home_next</span><br></pre></td></tr></table></figure></li><li><p>关键字字段：q（有实际值）</p></li></ul></li></ul><h4 id="4-谷歌搜索："><a href="#4-谷歌搜索：" class="headerlink" title="4. 谷歌搜索："></a>4. 谷歌搜索：</h4><ul><li><p>PC端：</p><ul><li><p>referer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.google.co.jp/（每个国家/地区的域名后缀不同，如 co.jp - 日本，hk - 香港，de - 德国）</span><br></pre></td></tr></table></figure></li><li><p>referer 关键字字段：无</p></li></ul></li><li><p>移动端：</p><ul><li><p>referer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.google.com/</span><br></pre></td></tr></table></figure></li><li><p>关键字字段：无</p></li></ul></li></ul><h4 id="5-神马搜索："><a href="#5-神马搜索：" class="headerlink" title="5. 神马搜索："></a>5. 神马搜索：</h4><ul><li>PC端：无</li><li><p>移动端：</p><ul><li><p>referer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://zm12.sm-tc.cn/?src=l4uLj8XQ0IiIiNHKztGTntA%3D&amp;uid=b64442e88b6decc4f6ade0bf131e6af0&amp;hid=0828a13d4a51cd539610a6c5a2e50f36&amp;pos=1&amp;cid=9&amp;time=1523160482592&amp;from=click&amp;restype=1&amp;pagetype=0400000000000004&amp;bu=web&amp;query=51la%E7%BB%9F%E8%AE%A1&amp;mode=&amp;v=1&amp;province=%E5%B9%BF%E4%B8%9C%E7%9C%81&amp;city=%E5%B9%BF%E5%B7%9E%E5%B8%82&amp;uc_param_str=dnntnwvepffrgibijbprsvdsdichei</span><br></pre></td></tr></table></figure></li><li><p>关键字字段：query（有实际值），host 为 zm12.sm-tc.cn</p></li></ul></li></ul><h4 id="6-BingLive（微软Bing搜索）："><a href="#6-BingLive（微软Bing搜索）：" class="headerlink" title="6. BingLive（微软Bing搜索）："></a>6. BingLive（微软Bing搜索）：</h4><ul><li><p>PC端：</p><ul><li><p>referer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.bing.com/</span><br></pre></td></tr></table></figure></li><li><p>关键字字段：无</p></li></ul></li><li><p>移动端：</p><ul><li><p>referer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.bing.com/</span><br></pre></td></tr></table></figure></li><li><p>关键字字段：无</p></li></ul></li></ul><h4 id="7-有道-网易搜索：目前仅为词典搜索"><a href="#7-有道-网易搜索：目前仅为词典搜索" class="headerlink" title="7. 有道/网易搜索：目前仅为词典搜索"></a>7. 有道/网易搜索：目前仅为词典搜索</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-百度搜索：&quot;&gt;&lt;a href=&quot;#1-百度搜索：&quot; class=&quot;headerlink&quot; title=&quot;1. 百度搜索：&quot;&gt;&lt;/a&gt;1. 百度搜索：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;PC端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;referer：&lt;/p&gt;
&lt;figu
      
    
    </summary>
    
      <category term="互联网" scheme="http://www.dwxu.me/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="搜索引擎" scheme="http://www.dwxu.me/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.dwxu.me/2018/05/14/Hello-World/"/>
    <id>http://www.dwxu.me/2018/05/14/Hello-World/</id>
    <published>2018-05-14T13:31:51.000Z</published>
    <updated>2018-05-14T15:32:08.106Z</updated>
    
    <content type="html"><![CDATA[<p>你好，世界！</p><p>不客观的说，自己也不算懒，但也不知道拖延了多久，总算是把个人博客的样子给整出来了。</p><p>基于 GitHub + Hexo 搭建，找了一套相对简洁的页面模板，稍微加以改造，便是现在这个样子，还算满意。</p><p>年后转到公司新的部门后，一直比较忙，期间也解决了一些大大小小的问题，在业务和技术方面也算有所收获，也一直想着找机会和时间总结并记录下来，于是乎又想起来久违的个人博客计划，花了两个晚上失落，过程比较顺利。</p><p>那么，之后要花更多的时间和精力，充实博客，充实自己！</p><p>晚安！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你好，世界！&lt;/p&gt;
&lt;p&gt;不客观的说，自己也不算懒，但也不知道拖延了多久，总算是把个人博客的样子给整出来了。&lt;/p&gt;
&lt;p&gt;基于 GitHub + Hexo 搭建，找了一套相对简洁的页面模板，稍微加以改造，便是现在这个样子，还算满意。&lt;/p&gt;
&lt;p&gt;年后转到公司新的部门后
      
    
    </summary>
    
      <category term="日记" scheme="http://www.dwxu.me/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="http://www.dwxu.me/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
</feed>
