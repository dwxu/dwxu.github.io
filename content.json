{"meta":{"title":"Dongwu Xu","subtitle":"Blog","description":null,"author":"Dongwu Xu","url":"http://www.dwxu.me"},"pages":[{"title":"关于我","date":"2018-05-21T14:11:10.068Z","updated":"2018-05-21T14:11:10.067Z","comments":false,"path":"about/index.html","permalink":"http://www.dwxu.me/about/index.html","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132&#123; \"name\": \"Dongwu Xu\", \"age\": 24, \"gender\": \"男\", \"address\": \"广东省广州市\", \"education\": \"本科\", \"profession\": \"计算机\", \"experience\": \"4年\", \"github\": \"https://github.com/dwxu\", \"blog\": \"http://www.dwxu.me\", \"email\": \"im.xudongwu@gmail.com\", \"skill\":[ [\"Java\"], [\"Spring\", \"Mybatis\", \"Apache Storm\"], [\"Html\", \"Javascript\", \"JQuery\", \"CSS\"], [\"Redis\", \"Kafka\"], [\"MySQL\", \"MariaDB\"], [\"Git\", \"SVN\"], [\"Maven\", \"Ant\"] ], \"os\": [\"masOS\", \"IOS\", \"Windows\", \"Linux\"], \"devTool\":[ [\"IntelliJ IDEA\", \"Eclipse\"], [\"Chrome DevTools\", \"Fiddler\"], [\"Git Bash\", \"TortoiseSVN\"], [\"Navicat\"], [\"Xshell\", \"Xftp\", \"SecureCRT\"] ]&#125;"},{"title":"分类","date":"2018-05-13T15:17:53.082Z","updated":"2018-05-13T15:17:53.082Z","comments":false,"path":"categories/index.html","permalink":"http://www.dwxu.me/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-05-13T15:17:53.083Z","updated":"2018-05-13T15:17:53.083Z","comments":false,"path":"tags/index.html","permalink":"http://www.dwxu.me/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-05-13T15:17:53.082Z","updated":"2018-05-13T15:17:53.082Z","comments":true,"path":"links/index.html","permalink":"http://www.dwxu.me/links/index.html","excerpt":"","text":""}],"posts":[{"title":"Java自动装箱和拆箱","slug":"java-boxing","date":"2018-05-22T14:10:15.000Z","updated":"2018-05-22T14:47:11.607Z","comments":true,"path":"2018/05/22/java-boxing/","link":"","permalink":"http://www.dwxu.me/2018/05/22/java-boxing/","excerpt":"","text":"毫无疑问，自动装箱和自动拆箱是 Java 语言里使用最多的语法糖。以 Integer 为例：12345public static void main(String[] args) &#123; Integer foo = 1; List&lt;Integer&gt; bar = Arrays.asList(1, 2, 3, 4); Integer[] baz = &#123;1, 2, 3, 4&#125;;&#125; 编译为 Class 文件后反编译：12345public static void main(String[] var0) &#123; Integer var1 = Integer.valueOf(1); List var2 = Arrays.asList(Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3), Integer.valueOf(4)); Integer[] var10000 = new Integer[]&#123;Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3), Integer.valueOf(4)&#125;;&#125; 自动装箱和拆箱是 JDK1.5 的新特性，之前都是手动进行包装类的装箱和拆箱：123int foo = 1; // 基本数据类型intInteger bar = new Integer(foo); // 手动装箱int baz = bar.intValue(); // 手动拆箱 JDK1.5 之后自动进行装箱和拆箱：123Integer foo = 10; // 自动装箱int bar = foo; // 自动拆箱System.out.println(foo--); // 输出10, 计算时的自动拆箱 另外，观察以下程序：123456789public static void main(String[] args) &#123; Integer a = 95; Integer b = 95; System.out.println(\"a == b: \" + (a == b)); Integer c = 295; Integer d = 295; System.out.println(\"c == d: \" + (c == d));&#125; 输出结果为：12a == b: truec == d: false 原因是在自动装箱的时候，[-128, 127] 内的值被装箱成 Integer 对象存在内存中（Cache），可以被重用，“ == ” 比较的是对象的内存地址，因此 a 和 b 实际上是同一个对象，比较结果自然是 true，而超出以上范围的数值装箱后的对象并不会被重用，那么就相当于创建两个对象，比较的结果自然是false。每种基本数据类型都有对应的包装类，如下： 基本数据类型 包装类 int Integer char Character float Float double Double byte Byte short Short long Long boolean Boolean","categories":[{"name":"Java","slug":"Java","permalink":"http://www.dwxu.me/categories/Java/"}],"tags":[{"name":"语法糖","slug":"语法糖","permalink":"http://www.dwxu.me/tags/语法糖/"}]},{"title":"同一手机号注册多个 Gmail 邮箱","slug":"gmail-register","date":"2018-05-21T13:37:18.000Z","updated":"2018-05-21T14:09:21.737Z","comments":true,"path":"2018/05/21/gmail-register/","link":"","permalink":"http://www.dwxu.me/2018/05/21/gmail-register/","excerpt":"","text":"由于之前注册的 Gmail 邮箱地址包含个人信息（十分建议申请邮箱地址时慎用个人信息，如生日等）并且不太正式，因此想另外申请一个邮箱地址，然而目前一个手机号注册只能注册一个账号，无法直接重新申请：尝试了多种方式进行注册后，发现可以使用 Chrome 浏览器 注册成功： 打开 设置 页面，点击 登录 CHROME，在弹出来的对话框中，点击 更多选项，选择 创建新账号： 按提示填写 姓氏 和 姓名 后，进入发送验证码页面，国家/地区 选择 HK，电话号码前面增加 +86： 点击 下一步，即可收到验证码短信： 之后根据提示填写邮箱地址完成注册 旧的邮箱可能绑定过其他网站或者系统，也需要查看相关邮件，可以使用新的邮箱代收旧邮箱的邮件，在 Gmail 邮箱界面 设置 - 账号和导入 - 查收其他账号的邮件 中进行设置，具体操作可点击 了解详情 查看。","categories":[{"name":"备忘","slug":"备忘","permalink":"http://www.dwxu.me/categories/备忘/"}],"tags":[{"name":"Gmail","slug":"Gmail","permalink":"http://www.dwxu.me/tags/Gmail/"}]},{"title":"Java泛型与类型擦除","slug":"java-generics","date":"2018-05-19T09:26:40.000Z","updated":"2018-05-22T14:46:07.196Z","comments":true,"path":"2018/05/19/java-generics/","link":"","permalink":"http://www.dwxu.me/2018/05/19/java-generics/","excerpt":"","text":"泛型是 JDK1.5 的一项新增特性，本质是参数化类型的应用，即所操作的数据类型被指定为一个参数，可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口和泛型方法： 泛型接口： 1通过类实现泛型接口时指定泛型 K 和 V 的具体类型，如 java.util 包中的 Map&lt;K, V&gt; ； 泛型类： 1编译器无法知道 K 和 V 的具体类型，只有运行时才真正根据类型来构造和分配内存，如 java.util 包中的 HashMap&lt;K,V&gt; ； 泛型方法：泛型方法返回值前加一个、等来声明这是一个泛型方法，如 12345678910111213public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; implements Map&lt;K,V&gt;, Cloneable, Serializable &#123; ... public V get(Object key) &#123; Node&lt;K,V&gt; e; return (e = getNode(hash(key), key)) == null ? null : e.value; &#125; ... public V put(K key, V value) &#123; return putVal(hash(key), key, value, false, true); &#125; ...&#125; 实际上，Java中 的泛型与 C++/C# 的中泛型实现不同，只在程序源码中存在，在编译后的字节码文件中，就已经替换为原生类型（也称为裸类型，如 Map&lt;K, V&gt; 即为 Map），并且在相应的地方插入了强制类型转换的代码，如： 123456789public static void main(String[] args) &#123; Map&lt;String, String&gt; data = new HashMap&lt;String, String&gt;(); data.put(\"foo\", \"foo\"); data.put(\"bar\", \"bar\"); data.put(\"baz\", \"baz\"); System.out.println(data.get(\"foo\")); System.out.println(data.get(\"bar\")); System.out.println(data.get(\"baz\"));&#125; 编译为 Class 文件后反编译：123456789public static void main(String[] paramArrayOfString) &#123; HashMap localHashMap = new HashMap(); localHashMap.put(\"foo\", \"foo\"); localHashMap.put(\"bar\", \"bar\"); localHashMap.put(\"baz\", \"baz\"); System.out.println((String)localHashMap.get(\"foo\")); System.out.println((String)localHashMap.get(\"bar\")); System.out.println((String)localHashMap.get(\"baz\"));&#125; 这种类型擦除的方式实现的泛型支持，只是作为一种语法糖来方便程序员的代码开发，提高效率和语法的严谨性，减少编码出错的机会，但并没有提供底层实质性的功能改进，因此 Java 的泛型支持实现一直存在争议和批评，例如由于 List&lt;String&gt; 和 List&lt;Integer&gt; 擦除后是同一类型（List），无法实现重载（实际上，两个方法如果返回值类型不同，使用 Sun JDK 1.6 的 javac 也能编译成功）。","categories":[{"name":"Java","slug":"Java","permalink":"http://www.dwxu.me/categories/Java/"}],"tags":[{"name":"语法糖","slug":"语法糖","permalink":"http://www.dwxu.me/tags/语法糖/"},{"name":"泛型","slug":"泛型","permalink":"http://www.dwxu.me/tags/泛型/"}]},{"title":"高并发下多站点在线访问实时统计","slug":"online-statistics","date":"2018-05-16T15:20:09.000Z","updated":"2018-05-16T15:24:15.382Z","comments":true,"path":"2018/05/16/online-statistics/","link":"","permalink":"http://www.dwxu.me/2018/05/16/online-statistics/","excerpt":"","text":"一、业务背景 实时统计多个站点的在线独立访问情况； 统计的时间范围为 10/15/30 分钟； 所有站点每秒累计约 10w 的 pv； 二、解决思路 按客户端 IP+SessionId 区分独立访问； 将在线访问信息（站点ID、IP、Session Id、访问时间等）写入 Kafka 集群； Storm(集群) 实时消费 Kafka 在线访问信息/消息，合并访问写入 Redis； 上层应用从 Redis 获取各站点 10/15/30 分钟内的独立访问数据进行计算并展示； 三、详细设计1. redis 数据结构设计 将每分钟的站点数据写入一个 Hash 集合（过期时间为 30 分钟），key 为 online:{comId}:{minute}，其中 {comId} 为站点ID，{minute} 为在线时间的分钟字段（0-59）； 集合下的元素结构为：field - {ip}:{sessionId}（独立访问），value - 该独立访问一分钟内的请求/响应次数，通过 hincrby 指令递增； 2. 数据统计 统计范围为当前 10/15/30 分钟内； 通过站点ID及当前时间从 redis 中读取该站点 30 分钟内的数据集合，例如站点ID为1，查询时间为 9点33分钟，则从 redis 读取 online:1:33 - online:1:3 的数据集合； 合并数据集合的 key（{ip}:{sessionId}），即去重，即可得到指定时间范围内的在线访问数； 3. 说明 数据写入 Redis 频繁，需要优先考虑写入耗时和内存的问题，因此通过 hincrby 和 expired 这两个时间复杂度为 O(1) 的指令来快速写入在线数据； 每个站点的数据集合过期时间为 30 分钟（根据请求时间计算过期的时间戳），因此一个站点最多同时存在 30 个数据集合，过期的集合由 Redis 自动清理，无需再自行清理； 每个集合的有效数据实际为 field 的部分，记录每分钟的独立访问，接口在获取数据进行统计时，直接取出 field 的 Set 集合进行自动合并即可； 四、线上情况 Redis 单机/单实例； 30分钟内活跃的站点约 1.5w 个，两个小时内监控 Redis，redis 总内存占用稳定在 5.5G 以下（较上线此统计前多占用 1G 内存），数据集合能够正常过期并被 redis 清理； 应用 0.3s 内完成统计访问最频繁/数据量最大的站点的各时段内在线访问情况，当然跟服务器性能比较好也有关系；","categories":[{"name":"解决方案","slug":"解决方案","permalink":"http://www.dwxu.me/categories/解决方案/"}],"tags":[{"name":"实时统计","slug":"实时统计","permalink":"http://www.dwxu.me/tags/实时统计/"},{"name":"Redis","slug":"Redis","permalink":"http://www.dwxu.me/tags/Redis/"}]},{"title":"各大搜索引擎来路referer头部及搜索关键字字段","slug":"search-engine-referer","date":"2018-05-15T12:25:00.000Z","updated":"2018-05-15T12:38:28.993Z","comments":true,"path":"2018/05/15/search-engine-referer/","link":"","permalink":"http://www.dwxu.me/2018/05/15/search-engine-referer/","excerpt":"","text":"1. 百度搜索： PC端： referer： 1https://www.baidu.com/link?url=gZRk-i0rKd2zEpXr6gLWgcMaB6gj49Qh0SRhVyeD1TG&amp;wd=&amp;eqid=e0224cf50000f590000000065ac98dee 关键字字段：wd（无实际值） 移动端： referer： 1https://m.baidu.com/from=0/bd_page_type=1/ssid=0/uid=0/pu=usm%401%2Csz%40320_1001%2Cta%40iphone_2_6.0_3_537/baiduid=EDC0F469B2C8C28ED6153A8DFE7B0F35/w=0_10_/t=iphone/l=1/tc?ref=www_iphone&amp;lid=9293408228010889187&amp;order=1&amp;fm=alop&amp;dict=-1&amp;tj=www_sitelink_normal_1_0_10_title&amp;wd=&amp;eqid=80f8d18b77481000100000005ac98e54&amp;w_qd=IlPT2AEptyoA_yjkTUugn4fHR5kW&amp;tcplug=1&amp;sec=28899&amp;di=6b8e30a65323dcbb&amp;bdenc=1&amp;tch=124.0.206.178.0.0&amp;nsrc=IlPT2AEptyoA_yixCFOxXnANedT62v3IEQGG_8kJLDKv7JuV&amp;clk_info=%7B%22srcid%22%3A1539%2C%22tplname%22%3A%22www_sitelink_normal%22%2C%22t%22%3A1523158616510%2C%22xpath%22%3A%22div-a-h3-em%22%7D 关键字字段：wd（无实际值） 2. 搜狗搜索（soso 搜索）： PC端： referer： 1https://www.sogou.com/link?url=DSOYnZeCC_oowgX7OeX6FW4YafSeot-j 关键字字段：无 移动端： referer： 1https://m.sogou.com/web/searchList.jsp?uID=vU0WMAQthy-ORLar&amp;v=5&amp;from=index&amp;w=1274&amp;t=1523158841365&amp;s_t=1523158844479&amp;s_from=index&amp;keyword=51la%E7%BB%9F%E8%AE%A1&amp;pg=webSearchList&amp;sourceid=sugg&amp;sugoq=&amp;sugn=0&amp;suguuid=fa153a85-07bb-4afa-bb07-69d3775d9966&amp;sugsuv=AAHV9fA6HwAAAAqRK1G8bQ0A1wA%3D&amp;sugtime=1523158844484 1https://wap.sogou.com/web/searchList.jsp?uID=vU0WMAQthy-ORLar&amp;v=5&amp;from=index&amp;w=1274&amp;t=1523158841365&amp;s_t=1523158844479&amp;s_from=index&amp;keyword=51la%E7%BB%9F%E8%AE%A1&amp;pg=webSearchList&amp;sourceid=sugg&amp;sugoq=&amp;sugn=0&amp;suguuid=fa153a85-07bb-4afa-bb07-69d3775d9966&amp;sugsuv=AAHV9fA6HwAAAAqRK1G8bQ0A1wA%3D&amp;sugtime=1523158844484 关键字字段：keyword（有实际值） 3. 360 搜索（360好搜）： PC端： referer： 1http://www.so.com/link?m=afEPOwxb%2BqdAts7rzNmmh%2F2cxMIM5669zqvLn1I5nPYjRlp8haa0nn%2FWJfYFNGvfzb4XdzUBb5wCnL2um08mnoi%2Bsge9ZjqTN referer 关键字字段：无 移动端： referer： 1https://m.so.com/s?q=51la%E7%BB%9F%E8%AE%A1&amp;src=msearch_next_input&amp;sug_pos=&amp;sug=&amp;srcg=home_next 关键字字段：q（有实际值） 4. 谷歌搜索： PC端： referer： 1https://www.google.co.jp/（每个国家/地区的域名后缀不同，如 co.jp - 日本，hk - 香港，de - 德国） referer 关键字字段：无 移动端： referer： 1https://www.google.com/ 关键字字段：无 5. 神马搜索： PC端：无 移动端： referer： 1https://zm12.sm-tc.cn/?src=l4uLj8XQ0IiIiNHKztGTntA%3D&amp;uid=b64442e88b6decc4f6ade0bf131e6af0&amp;hid=0828a13d4a51cd539610a6c5a2e50f36&amp;pos=1&amp;cid=9&amp;time=1523160482592&amp;from=click&amp;restype=1&amp;pagetype=0400000000000004&amp;bu=web&amp;query=51la%E7%BB%9F%E8%AE%A1&amp;mode=&amp;v=1&amp;province=%E5%B9%BF%E4%B8%9C%E7%9C%81&amp;city=%E5%B9%BF%E5%B7%9E%E5%B8%82&amp;uc_param_str=dnntnwvepffrgibijbprsvdsdichei 关键字字段：query（有实际值），host 为 zm12.sm-tc.cn 6. BingLive（微软Bing搜索）： PC端： referer： 1https://www.bing.com/ 关键字字段：无 移动端： referer： 1https://www.bing.com/ 关键字字段：无 7. 有道/网易搜索：目前仅为词典搜索","categories":[{"name":"互联网","slug":"互联网","permalink":"http://www.dwxu.me/categories/互联网/"}],"tags":[{"name":"搜索引擎","slug":"搜索引擎","permalink":"http://www.dwxu.me/tags/搜索引擎/"}]},{"title":"Hello World","slug":"Hello-World","date":"2018-05-14T13:31:51.000Z","updated":"2018-05-14T15:32:08.106Z","comments":true,"path":"2018/05/14/Hello-World/","link":"","permalink":"http://www.dwxu.me/2018/05/14/Hello-World/","excerpt":"","text":"你好，世界！ 不客观的说，自己也不算懒，但也不知道拖延了多久，总算是把个人博客的样子给整出来了。 基于 GitHub + Hexo 搭建，找了一套相对简洁的页面模板，稍微加以改造，便是现在这个样子，还算满意。 年后转到公司新的部门后，一直比较忙，期间也解决了一些大大小小的问题，在业务和技术方面也算有所收获，也一直想着找机会和时间总结并记录下来，于是乎又想起来久违的个人博客计划，花了两个晚上失落，过程比较顺利。 那么，之后要花更多的时间和精力，充实博客，充实自己！ 晚安！","categories":[{"name":"日记","slug":"日记","permalink":"http://www.dwxu.me/categories/日记/"}],"tags":[{"name":"日记","slug":"日记","permalink":"http://www.dwxu.me/tags/日记/"}]}]}